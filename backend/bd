-- Tabla: periodos_academicos
-- Almacena los diferentes períodos académicos (ej. Semestre 2024-1).
CREATE TABLE periodos_academicos (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre_periodo VARCHAR(50) NOT NULL,
    fecha_inicio DATE NOT NULL,
    fecha_fin DATE NOT NULL
);
COMMENT ON TABLE periodos_academicos IS 'Almacena los diferentes períodos académicos (ej. Semestre 2024-1).';
COMMENT ON COLUMN periodos_academicos.id IS 'Identificador único para el período académico.';
COMMENT ON COLUMN periodos_academicos.nombre_periodo IS 'Nombre descriptivo del período (ej. "Semestre 2024-1").';
COMMENT ON COLUMN periodos_academicos.fecha_inicio IS 'Fecha de inicio del período académico.';
COMMENT ON COLUMN periodos_academicos.fecha_fin IS 'Fecha de finalización del período académico.';


-- Tabla: profesores
-- Contiene la información de los profesores.
CREATE TABLE profesores (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    -- user_id UUID REFERENCES auth.users(id) UNIQUE, -- Opcional: para vincular con Supabase Auth
    nombre VARCHAR(100) NOT NULL,
    apellido VARCHAR(100) NOT NULL,
    email VARCHAR(150) UNIQUE NOT NULL,
    departamento VARCHAR(100)
);
COMMENT ON TABLE profesores IS 'Contiene la información de los profesores.';
COMMENT ON COLUMN profesores.id IS 'Identificador único para el profesor.';
-- COMMENT ON COLUMN profesores.user_id IS 'Referencia al usuario en el sistema de autenticación de Supabase.';
COMMENT ON COLUMN profesores.email IS 'Email único del profesor.';


-- Tabla: asignaturas
-- Define las asignaturas o materias que se pueden impartir.
CREATE TABLE asignaturas (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre_asignatura VARCHAR(100) NOT NULL,
    codigo_asignatura VARCHAR(10) UNIQUE NOT NULL,
    creditos INT CHECK (creditos > 0),
    total_horas INT CHECK (total_horas > 0)
);
COMMENT ON TABLE asignaturas IS 'Define las asignaturas o materias que se pueden impartir.';
COMMENT ON COLUMN asignaturas.codigo_asignatura IS 'Código único para la asignatura (ej. "MAT-101").';
COMMENT ON COLUMN asignaturas.creditos IS 'Número de créditos que otorga la asignatura.';


-- Tabla: grupos
-- Representa un grupo específico de una asignatura, impartido por un profesor en un período.
CREATE TABLE grupos (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    asignatura_id BIGINT NOT NULL REFERENCES asignaturas(id),
    profesor_id BIGINT NOT NULL REFERENCES profesores(id),
    periodo_id BIGINT NOT NULL REFERENCES periodos_academicos(id),
    numero_grupo VARCHAR(10) NOT NULL,
    capacidad INT CHECK (capacidad >= 0),
    UNIQUE(asignatura_id, periodo_id, numero_grupo) -- Un grupo debe ser único por asignatura y período
);
COMMENT ON TABLE grupos IS 'Representa un grupo específico de una asignatura, impartido por un profesor en un período.';
COMMENT ON COLUMN grupos.numero_grupo IS 'Número o identificador del grupo (ej. "A", "01").';
COMMENT ON COLUMN grupos.capacidad IS 'Número máximo de estudiantes que pueden inscribirse.';


-- Tabla: estudiantes
-- Almacena la información de los estudiantes.
CREATE TABLE estudiantes (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    -- user_id UUID REFERENCES auth.users(id) UNIQUE, -- Opcional: para vincular con Supabase Auth
    nombre VARCHAR(100) NOT NULL,
    apellido VARCHAR(100) NOT NULL,
    fecha_nacimiento DATE,
    email VARCHAR(150) UNIQUE NOT NULL,
    telefono VARCHAR(20)
);
COMMENT ON TABLE estudiantes IS 'Almacena la información de los estudiantes.';
COMMENT ON COLUMN estudiantes.id IS 'Identificador único para el estudiante.';
-- COMMENT ON COLUMN estudiantes.user_id IS 'Referencia al usuario en el sistema de autenticación de Supabase.';
COMMENT ON COLUMN estudiantes.email IS 'Email único del estudiante.';


-- Tabla: inscripciones
-- Registra la inscripción de un estudiante en un grupo.
CREATE TABLE inscripciones (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    estudiante_id BIGINT NOT NULL REFERENCES estudiantes(id),
    grupo_id BIGINT NOT NULL REFERENCES grupos(id),
    fecha_inscripcion TIMESTAMPTZ NOT NULL DEFAULT now(),
    nota_final DECIMAL(4,2) CHECK (nota_final >= 0.00 AND nota_final <= 100.00),
    estado_inscripcion VARCHAR(20) NOT NULL DEFAULT 'Inscrito' CHECK (estado_inscripcion IN ('Inscrito', 'Retirado', 'Completado', 'Reprobado')),
    UNIQUE(estudiante_id, grupo_id) -- Un estudiante solo puede inscribirse una vez en el mismo grupo.
);
COMMENT ON TABLE inscripciones IS 'Registra la inscripción de un estudiante en un grupo.';
COMMENT ON COLUMN inscripciones.fecha_inscripcion IS 'Fecha y hora en que se realizó la inscripción.';
COMMENT ON COLUMN inscripciones.nota_final IS 'Nota final obtenida por el estudiante en el grupo.';
COMMENT ON COLUMN inscripciones.estado_inscripcion IS 'Estado actual de la inscripción.';


-- Tabla: horarios
-- Define los horarios y salones para cada grupo. Un grupo puede tener varias sesiones.
CREATE TABLE horarios (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    grupo_id BIGINT NOT NULL REFERENCES grupos(id) ON DELETE CASCADE,
    dia_semana VARCHAR(15) NOT NULL CHECK (dia_semana IN ('Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado', 'Domingo')),
    hora_inicio TIME WITH TIME ZONE NOT NULL,
    hora_fin TIME WITH TIME ZONE NOT NULL,
    salon VARCHAR(50),
    CHECK (hora_fin > hora_inicio)
);
COMMENT ON TABLE horarios IS 'Define los horarios y salones para cada grupo. Un grupo puede tener varias sesiones.';
COMMENT ON COLUMN horarios.grupo_id IS 'Grupo al que pertenece este horario.';
COMMENT ON COLUMN horarios.dia_semana IS 'Día de la semana para esta sesión.';
COMMENT ON COLUMN horarios.salon IS 'Salón o aula donde se imparte la clase.';

